// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/s4heid/goom/cmd"
)

type FakeBrowser struct {
	OpenURLStub        func(string) error
	openURLMutex       sync.RWMutex
	openURLArgsForCall []struct {
		arg1 string
	}
	openURLReturns struct {
		result1 error
	}
	openURLReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeBrowser) OpenURL(arg1 string) error {
	fake.openURLMutex.Lock()
	ret, specificReturn := fake.openURLReturnsOnCall[len(fake.openURLArgsForCall)]
	fake.openURLArgsForCall = append(fake.openURLArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("OpenURL", []interface{}{arg1})
	fake.openURLMutex.Unlock()
	if fake.OpenURLStub != nil {
		return fake.OpenURLStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.openURLReturns
	return fakeReturns.result1
}

func (fake *FakeBrowser) OpenURLCallCount() int {
	fake.openURLMutex.RLock()
	defer fake.openURLMutex.RUnlock()
	return len(fake.openURLArgsForCall)
}

func (fake *FakeBrowser) OpenURLCalls(stub func(string) error) {
	fake.openURLMutex.Lock()
	defer fake.openURLMutex.Unlock()
	fake.OpenURLStub = stub
}

func (fake *FakeBrowser) OpenURLArgsForCall(i int) string {
	fake.openURLMutex.RLock()
	defer fake.openURLMutex.RUnlock()
	argsForCall := fake.openURLArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeBrowser) OpenURLReturns(result1 error) {
	fake.openURLMutex.Lock()
	defer fake.openURLMutex.Unlock()
	fake.OpenURLStub = nil
	fake.openURLReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeBrowser) OpenURLReturnsOnCall(i int, result1 error) {
	fake.openURLMutex.Lock()
	defer fake.openURLMutex.Unlock()
	fake.OpenURLStub = nil
	if fake.openURLReturnsOnCall == nil {
		fake.openURLReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.openURLReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeBrowser) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.openURLMutex.RLock()
	defer fake.openURLMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeBrowser) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ cmd.Browser = new(FakeBrowser)
